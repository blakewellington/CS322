/* Generated By:JavaCC: Do not edit this line. ast1Parser.java */
package ast1;
import java.util.*;
import java.io.*;

public class ast1Parser implements ast1ParserConstants {
  public static void main(String [] args) throws Exception {
    if (args.length == 1) {
      FileInputStream stream = new FileInputStream(args[0]);
      Ast1.Program p = new ast1.ast1Parser(stream).Program();
      stream.close();
      System.out.println(p);
    } else {
      System.out.println("Need one file name as command-line argument.");
    }
  }

// Program -> {Func}
//
  static final public Ast1.Program Program() throws ParseException {
  List<Ast1.Func> fl = new ArrayList<Ast1.Func>();
  Ast1.Func f;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwFunc:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = Func();
               fl.add(f);
    }
    jj_consume_token(0);
    {if (true) return new Ast1.Program(fl);}
    throw new Error("Missing return statement in function");
  }

// Func -> "Func" Type <Id> "(" {Formal} ")" {VarDecl} {Stmt}
//
  static final public Ast1.Func Func() throws ParseException {
  List<Ast1.Formal> fl = new ArrayList<Ast1.Formal>();
  List<Ast1.VarDecl> vl = new ArrayList<Ast1.VarDecl>();
  List<Ast1.Stmt> sl = new ArrayList<Ast1.Stmt>();
  String nm;
  Ast1.Type t;
  Ast1.Formal f;
  Ast1.VarDecl v;
  Ast1.Stmt s;
    jj_consume_token(kwFunc);
    t = Type();
    nm = Id();
    jj_consume_token(32);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      f = Formal();
                                             fl.add(f);
    }
    jj_consume_token(33);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwVarDecl:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      v = VarDecl();
                  vl.add(v);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwAssign:
      case kwCallStmt:
      case kwIf:
      case kwPrint:
      case kwReturn:
      case kwWhile:
      case 34:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      s = Stmt();
                                               sl.add(s);
    }
    {if (true) return new Ast1.Func(t, nm, fl, vl, sl);}
    throw new Error("Missing return statement in function");
  }

// Formal -> "(" Type <Id> ")"
//
  static final public Ast1.Formal Formal() throws ParseException {
  String nm; Ast1.Type t;
    jj_consume_token(32);
    jj_consume_token(kwFormal);
    t = Type();
    nm = Id();
    jj_consume_token(33);
    {if (true) return new Ast1.Formal(t, nm);}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> "VarDecl" Type <Id> Exp
//
  static final public Ast1.VarDecl VarDecl() throws ParseException {
  String nm;
  Ast1.Type t;
  Ast1.Exp init;
    jj_consume_token(kwVarDecl);
    t = Type();
    nm = Id();
    init = Exp();
    {if (true) return new Ast1.VarDecl(t, nm, init);}
    throw new Error("Missing return statement in function");
  }

// Type -> "void"
//      |  "IntType" 
//      |  "BoolType" 
//      |  "(" "ArrayType" Type ")"
//
  static final public Ast1.Type Type() throws ParseException {
  Ast1.Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case kwVoid:
      jj_consume_token(kwVoid);
                                    t = null;
      break;
    case kwIntType:
      jj_consume_token(kwIntType);
                                    t = new Ast1.IntType();
      break;
    case kwBoolType:
      jj_consume_token(kwBoolType);
                                    t = new Ast1.BoolType();
      break;
    case 32:
      jj_consume_token(32);
      jj_consume_token(kwArrayType);
      t = Type();
      jj_consume_token(33);
                                    t = new Ast1.ArrayType(t);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// Stmt -> "{" {Stmt} "}"
//      |  "Assign" Exp Exp
//      |  "CallStmt" <Id> "(" {Exp} ")"
//      |  "If" Exp Stmt [ "Else" Stmt ]  
//      |  "While" Exp Stmt
//      |  "Print" Exp
//      |  "Return" Exp
//
  static final public Ast1.Stmt Stmt() throws ParseException {
  List<Ast1.Stmt> sl = new ArrayList<Ast1.Stmt>();
  List<Ast1.Exp> args = new ArrayList<Ast1.Exp>();
  Ast1.Exp lhs, rhs, cond, arg, val;
  Ast1.Stmt s, s1, s2=null;
  String nm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case kwAssign:
        case kwCallStmt:
        case kwIf:
        case kwPrint:
        case kwReturn:
        case kwWhile:
        case 34:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        s = Stmt();
                     sl.add(s);
      }
      jj_consume_token(35);
                                           s = new Ast1.Block(sl);
      break;
    case kwAssign:
      jj_consume_token(kwAssign);
      lhs = Exp();
      rhs = Exp();
                                    s = new Ast1.Assign(lhs, rhs);
      break;
    case kwCallStmt:
      jj_consume_token(kwCallStmt);
      nm = Id();
      jj_consume_token(32);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IntLit:
        case BoolLit:
        case StrLit:
        case Id:
        case 32:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        arg = Exp();
                                         args.add(arg);
      }
      jj_consume_token(33);
                                    s = new Ast1.CallStmt(nm, args);
      break;
    case kwIf:
      jj_consume_token(kwIf);
      cond = Exp();
      s1 = Stmt();
      if (jj_2_1(2)) {
        jj_consume_token(kwElse);
        s2 = Stmt();
      } else {
        ;
      }
                                    s = new Ast1.If(cond, s1, s2);
      break;
    case kwWhile:
      jj_consume_token(kwWhile);
      cond = Exp();
      s = Stmt();
                                    s = new Ast1.While(cond, s);
      break;
    case kwPrint:
      jj_consume_token(kwPrint);
      arg = Exp();
                                    s = new Ast1.Print(arg);
      break;
    case kwReturn:
      jj_consume_token(kwReturn);
      val = Exp();
                                    s = new Ast1.Return(val);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//  Exp -> "(" ")"
//      |  "(" "Binop" BOP Exp Exp ")"
//      |  "(" "Unop" UOP Exp ")"
//      |  "(" "Call" Exp <Id> "(" {Exp} ")" ")"
//      |  "(" "NewArray" Type <IntLit> ")"
//      |  "(" "ArrayElm" Exp Exp ")"
//      | <Id> 
//      | <IntLit>
//      | <BoolLit>
//      | <StrLit>
//
  static final public Ast1.Exp Exp() throws ParseException {
  List<Ast1.Exp> args = new ArrayList<Ast1.Exp>();
  Ast1.Exp e=null, e1, e2, arg, ar, idx;
  Ast1.Type et;
  Ast1.BOP bop;
  Ast1.UOP uop;
  String nm, s;
  int sz, i;
  boolean b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwArrayElm:
      case kwBinop:
      case kwCall:
      case kwNewArray:
      case kwUnop:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case kwBinop:
          jj_consume_token(kwBinop);
          bop = binOp();
          e1 = Exp();
          e2 = Exp();
                                              e = new Ast1.Binop(bop, e1, e2);
          break;
        case kwUnop:
          jj_consume_token(kwUnop);
          uop = unOp();
          e = Exp();
                                              e = new Ast1.Unop(uop, e);
          break;
        case kwCall:
          jj_consume_token(kwCall);
          nm = Id();
          jj_consume_token(32);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IntLit:
            case BoolLit:
            case StrLit:
            case Id:
            case 32:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_7;
            }
            arg = Exp();
                                       args.add(arg);
          }
          jj_consume_token(33);
                                              e = new Ast1.Call(nm, args);
          break;
        case kwNewArray:
          jj_consume_token(kwNewArray);
          et = Type();
          sz = IntLit();
                                              e = new Ast1.NewArray(et, sz);
          break;
        case kwArrayElm:
          jj_consume_token(kwArrayElm);
          ar = Exp();
          idx = Exp();
                                              e = new Ast1.ArrayElm(ar, idx);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(33);
      break;
    case Id:
      s = Id();
                                              e = new Ast1.Id(s);
      break;
    case IntLit:
      i = IntLit();
                                              e = new Ast1.IntLit(i);
      break;
    case BoolLit:
      b = BoolLit();
                                              e = new Ast1.BoolLit(b);
      break;
    case StrLit:
      s = StrLit();
                                              e = new Ast1.StrLit(s);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast1.BOP binOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
             {if (true) return Ast1.BOP.ADD;}
      break;
    case 37:
      jj_consume_token(37);
             {if (true) return Ast1.BOP.SUB;}
      break;
    case 38:
      jj_consume_token(38);
             {if (true) return Ast1.BOP.MUL;}
      break;
    case 39:
      jj_consume_token(39);
             {if (true) return Ast1.BOP.DIV;}
      break;
    case 40:
      jj_consume_token(40);
             {if (true) return Ast1.BOP.AND;}
      break;
    case 41:
      jj_consume_token(41);
             {if (true) return Ast1.BOP.OR;}
      break;
    case 42:
      jj_consume_token(42);
             {if (true) return Ast1.BOP.EQ;}
      break;
    case 43:
      jj_consume_token(43);
             {if (true) return Ast1.BOP.NE;}
      break;
    case 44:
      jj_consume_token(44);
             {if (true) return Ast1.BOP.LT;}
      break;
    case 45:
      jj_consume_token(45);
             {if (true) return Ast1.BOP.LE;}
      break;
    case 46:
      jj_consume_token(46);
             {if (true) return Ast1.BOP.GT;}
      break;
    case 47:
      jj_consume_token(47);
             {if (true) return Ast1.BOP.GE;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast1.UOP unOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
             {if (true) return Ast1.UOP.NEG;}
      break;
    case 48:
      jj_consume_token(48);
             {if (true) return Ast1.UOP.NOT;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Id() throws ParseException {
  Token n;
    n = jj_consume_token(Id);
           {if (true) return n.image;}
    throw new Error("Missing return statement in function");
  }

  static final public int IntLit() throws ParseException {
  Token n;
    n = jj_consume_token(IntLit);
               {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  static final public boolean BoolLit() throws ParseException {
  Token n;
    n = jj_consume_token(BoolLit);
                {if (true) return Boolean.parseBoolean(n.image);}
    throw new Error("Missing return statement in function");
  }

  static final public String StrLit() throws ParseException {
  Token n;
    n = jj_consume_token(StrLit);
               {if (true) return n.image.substring(1,n.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(kwElse)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(kwReturn)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(kwPrint)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(kwWhile)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(kwIf)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(kwCallStmt)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(kwAssign)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ast1ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x0,0x800000,0x2322200,0x1040800,0x2322200,0xf0000000,0x2322200,0xf0000000,0x481480,0x481480,0xf0000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x0,0x4,0x1,0x4,0x1,0x4,0x1,0x0,0x0,0x1,0xfff0,0x10020,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ast1Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ast1Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ast1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ast1Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ast1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ast1Parser(ast1ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ast1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
